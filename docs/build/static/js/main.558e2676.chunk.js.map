{"version":3,"sources":["SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getHeapSortAnimations","array","animations","length","mainArray","n","i","Math","floor","heapify","j","push","swap","getHeapSortHelper","console","log","largest","l","r","getQuickSortAnimations","getQuickSortHelper","low","high","pi","pivot","partition","x","y","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","startIdx","endIdx","middleIdx","k","doMerge","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","flag1","flag2","getBubbleSortAnimations","className","map","value","idx","key","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.558e2676.chunk.js","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n\n//     let i = 0;\n//     let j = 0;\n\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n\nexport function getBubbleSortAnimations(array){\n    let animations = [];\n    let n = array.length; \n    for (let i = 0; i < n-1; i++){ \n        for (let j = 0; j < n-i-1; j++){\n            animations.push([j, j+1, false, false]);\n            animations.push([j, j+1, false, true]);\n            if (array[j] > array[j+1]) \n            { \n                animations.push([j, j+1, true, true]);\n                animations.push([j, j+1, true, true]);\n                swap(array, j, j + 1);\n            } \n        }\n    }\n    return animations;      \n}\n\nexport function getHeapSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getHeapSortHelper(array,animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getHeapSortHelper(mainArray, animations){\n    let n = mainArray.length;\n    //Build Heap\n    for(let i = Math.floor(n / 2) -1; i >= 0; i--){\n        heapify(mainArray, n, i, animations);\n    }\n    // One by one extract an element from heap \n    for(let j = n-1; j >= 0; j--){\n        animations.push([0, mainArray[j], true, true]);\n        animations.push([j, mainArray[0], true, true]);\n        swap(mainArray, 0, j );\n        heapify(mainArray, j,  0, animations);\n    }\n}\n\nfunction heapify(mainArray, n, i, animations){\n    let largest = i; // Initialize largest as root \n    let l = 2*i + 1; // left = 2*i + 1 \n    let r = 2*i + 2; // right = 2*i + 2 \n\n    if(l < mainArray.length){\n        animations.push([largest, l, false, false]);\n        animations.push([largest, l, false, true]);\n    }\n    // If left child is larger than root \n    if (l < n && mainArray[l] > mainArray[largest]) {\n        largest = l; \n    }\n\n    if(r < mainArray.length){   \n        animations.push([largest, r, false, false]);\n        animations.push([largest, r, false, true]);\n    }\n    // If right child is larger than largest so far \n    if (r < n && mainArray[r] > mainArray[largest]){\n        largest = r; \n    }   \n    // If largest is not root \n    if (largest != i){ \n        animations.push([i, mainArray[largest], true, true]);\n        animations.push([largest, mainArray[i], true, true]);\n        swap(mainArray, i, largest);\n        // Recursively heapify the affected sub-tree \n        heapify(mainArray, n, largest, animations); \n    } \n}\n\nexport function getQuickSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getQuickSortHelper(array, 0, array.length - 1, animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations){\n    if(low < high){\n        let pi = partition(mainArray, low, high, animations);\n        console.log(pi);\n        getQuickSortHelper(mainArray, low, pi-1, animations); \n        getQuickSortHelper(mainArray, pi+1, high, animations); \n    }\n}\n\nfunction partition(mainArray, low, high, animations){\n    let pivot = mainArray[high];\n    let i = low - 1;\n    let j = low;\n\n    for(j = low; j < high; j ++){\n        animations.push([j,high, false, false]);\n        animations.push([j,high, false, true]);\n        if(mainArray[j] < pivot){\n            i++;\n            animations.push([i, mainArray[j], true, true]);\n            animations.push([j, mainArray[i], true, true]);\n            swap(mainArray, i, j)\n        }\n    }\n    animations.push([i+1, mainArray[high], true, true]);\n    animations.push([high, mainArray[i+1], true, true]);\n    swap(mainArray, i+1, high)\n\n    return i + 1;\n}\n\nfunction swap(array, x , y){\n    // animations.push([x, high, false, false]);\n    // animations.push([x, high, false, true]);\n    // animations.push([x, array[y], true, true]);\n    // animations.push([y, array[x], true, true]);\n    let temp = array[x];\n    array[x] = array[y];\n    array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx){\n        return;\n    }\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k] = auxiliaryArray[i];\n            k++;\n            i++;\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k] = auxiliaryArray[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k] = auxiliaryArray[i];\n        k++;\n        i++;\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k] = auxiliaryArray[j];\n        k++;\n        j++;\n    }\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms.js';\nimport {getQuickSortAnimations} from '../SortingAlgorithms.js';\nimport {getHeapSortAnimations} from '../SortingAlgorithms.js';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms.js';\n\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 160;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'teal';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n    array: [],\n    };\n}\n\ncomponentDidMount() {\n    this.resetArray();\n}\n\nresetArray() {\n    const array = [];\n    // const array = [40, 100, 30, 50, 10];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n        array.push(randomIntFromInterval(5, 730));\n    }\n\n    // for (let i = 8; i > 0; i--) {\n    //     array.push(i*10);\n    // }\n    this.setState({array});\n}\n\nmergeSort() {\n   // We leave it as an exercise to the viewer of this code to implement this method.\n   const animations = getMergeSortAnimations(this.state.array);\n   console.log(animations);\n   for (let i = 0; i < animations.length; i++) {\n       const arrayBars = document.getElementsByClassName('array-bar');\n       const isColorChange = i % 3 !== 2;\n       if (isColorChange) {\n           const [barOneIdx, barTwoIdx] = animations[i];\n           const barOneStyle = arrayBars[barOneIdx].style;\n           const barTwoStyle = arrayBars[barTwoIdx].style;\n           const color = (i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR);\n           setTimeout(() => {\n               barOneStyle.backgroundColor = color;\n               barTwoStyle.backgroundColor = color;\n               }, i * ANIMATION_SPEED_MS);\n       } else {\n           setTimeout(() => {\n           const [barOneIdx, newHeight] = animations[i];\n           const barOneStyle = arrayBars[barOneIdx].style;\n           barOneStyle.height = `${newHeight}px`;\n           }, i * ANIMATION_SPEED_MS);\n       }\n   }\n}\n\nquickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n        const go = flag1 === true;\n        if (!go) {\n            const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = (flag2 === true ? PRIMARY_COLOR : SECONDARY_COLOR);\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n        } else {\n            setTimeout(() => {\n            const [barOneIdx, newHeight, flag] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n        }\n    }\n}\n\nheapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n        const go = flag1 === true;\n        if (!go) {\n            const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = (flag2 === true ? PRIMARY_COLOR : SECONDARY_COLOR);\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n        } else {\n            setTimeout(() => {\n            const [barOneIdx, newHeight, flag] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n        }\n    }\n}\n\nbubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n        const go = flag1 === true;\n        if (!go) {\n            const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = (flag2 === true ? PRIMARY_COLOR : SECONDARY_COLOR);\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n        } else {\n            setTimeout(() => {\n            const [barOneIdx, newHeight, flag] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n        }\n    }\n}\n\n// NOTE: This method will only work if your sorting algorithms actually return\n// the sorted arrays; if they return the animations (as they currently do), then\n// this method will be broken.\n// test() {\n//     for (let i = 0; i < 50; i++) {\n//     const array = [];\n//     const length = randomIntFromInterval(1, 1000);\n//     for (let i = 0; i < length; i++) {\n//         array.push(randomIntFromInterval(-1000, 1000));\n//     }\n//     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//     // const mergeSortedArray = getMergeSortAnimations(array.slice());\n//     const quickSortedArray = getQuickSortAnimations(array.slice());\n//     // const heapSortedArray = getHeapSortAnimations(array.slice());\n//     // const bubbleSortedArray = getBubbleSortAnimations(array.slice());\n//     console.log(arraysAreEqual(javaScriptSortedArray, quickSortedArray));\n//     }\n// }\n\nrender() {\n    const {array} = this.state;\n\n    return (\n    <div className=\"array-container\">\n        {array.map((value, idx) => (\n        <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        {/* <button onClick={() => this.test()}>\n        Test Sorting Algorithms (BROKEN)\n        </button> */}\n    </div>\n    );\n}\n}\n\nfunction randomIntFromInterval(min, max) {\n// min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length){\n        return false;\n    }\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}