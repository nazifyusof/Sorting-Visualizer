{"ast":null,"code":"export const mergeSort = array => {\n  const midIndex = Math.floor(array.length / 2);\n  const firstHalf = mergeSort(array.slice(0, midIndex));\n  const secondHalf = mergeSort(array.slice(midIndex));\n  const sortedArray = [];\n  let i = 0;\n  let j = 0;\n\n  while (i < firstHalf.length && j < secondHalf.length) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n\n  while (i < firstHalf.length) {\n    sortedArray.push(firstHalf[i++]);\n  }\n\n  while (j < secondHalf.length) {\n    sortedArray.push(secondHalf[j++]);\n  }\n\n  return sortedArray;\n};","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingAlgorithms.js"],"names":["mergeSort","array","midIndex","Math","floor","length","firstHalf","slice","secondHalf","sortedArray","i","j","push"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGC,KAAK,IAAI;AAC9B,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,MAAN,GAAe,CAA1B,CAAjB;AACA,QAAMC,SAAS,GAAGN,SAAS,CAACC,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeL,QAAf,CAAD,CAA3B;AACA,QAAMM,UAAU,GAAGR,SAAS,CAACC,KAAK,CAACM,KAAN,CAAYL,QAAZ,CAAD,CAA5B;AACA,QAAMO,WAAW,GAAG,EAApB;AAEA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAMD,CAAC,GAAGJ,SAAS,CAACD,MAAd,IAAwBM,CAAC,GAAGH,UAAU,CAACH,MAA7C,EAAoD;AAChD,QAAGC,SAAS,CAACI,CAAD,CAAT,GAAeF,UAAU,CAACG,CAAD,CAA5B,EAAgC;AAC5BF,MAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH,KAFD,MAEK;AACDD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;AACJ;;AAED,SAAMD,CAAC,GAAGJ,SAAS,CAACD,MAApB,EAA2B;AACvBI,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH;;AACD,SAAMC,CAAC,GAAGH,UAAU,CAACH,MAArB,EAA4B;AACxBI,IAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;;AACD,SAAOF,WAAP;AACH,CAxBM","sourcesContent":["export const mergeSort = array => {\n    const midIndex = Math.floor(array.length / 2);\n    const firstHalf = mergeSort(array.slice(0, midIndex));\n    const secondHalf = mergeSort(array.slice(midIndex));\n    const sortedArray = [];\n\n    let i = 0;\n    let j = 0;\n\n    while(i < firstHalf.length && j < secondHalf.length){\n        if(firstHalf[i] < secondHalf[j]){\n            sortedArray.push(firstHalf[i++]);\n        }else{\n            sortedArray.push(secondHalf[j++]);\n        }\n    }\n\n    while(i < firstHalf.length){\n        sortedArray.push(firstHalf[i++]);\n    }\n    while(j < secondHalf.length){\n        sortedArray.push(secondHalf[j++]);\n    }\n    return sortedArray;\n};"]},"metadata":{},"sourceType":"module"}