{"ast":null,"code":"// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n//     let i = 0;\n//     let j = 0;\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n// /* The main function that implements QuickSort() \n//   arr[] --> Array to be sorted, \n//   low  --> Starting index, \n//   high  --> Ending index */\n// void sort(int arr[], int low, int high) \n// { \n//     if (low < high) \n//     { \n//         /* pi is partitioning index, arr[pi] is  \n//           now at right place */\n//         int pi = partition(arr, low, high); \n//         // Recursively sort elements before \n//         // partition and after partition \n//         sort(arr, low, pi-1); \n//         sort(arr, pi+1, high); \n//     } \n// } \nexport function getHeapSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getHeapSortHelper(array, 0, array.length - 1, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction getHeapSortHelper(mainArray, low, high, animations) {\n  // int n = arr.length; \n  // // Build heap (rearrange array) \n  // for (int i = n / 2 - 1; i >= 0; i--) \n  //     heapify(arr, n, i); \n  // // One by one extract an element from heap \n  // for (int i=n-1; i>=0; i--) \n  // { \n  //     // Move current root to end \n  //     int temp = arr[0]; \n  //     arr[0] = arr[i]; \n  //     arr[i] = temp; \n  //     // call max heapify on the reduced heap \n  //     heapify(arr, i, 0); \n  // } \n  let n = mainArray.length; //Build Heap\n\n  for (let i = n / 2 - 1; i >= 0; i--) {\n    // int temp = arr[0]; \n    //     arr[0] = arr[i]; \n    //     arr[i] = temp; \n    heapify(mainArray, n, i);\n  } // One by one extract an element from heap \n\n\n  for (let j = n - 1; j >= 0; j--) {\n    swap(mainArray);\n    heapify(mainArray, j, 0);\n  }\n}\n\nexport function getQuickSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getQuickSortHelper(array, 0, array.length - 1, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations) {\n  if (low < high) {\n    let pi = partition(mainArray, low, high, animations);\n    console.log(pi);\n    getQuickSortHelper(mainArray, low, pi - 1, animations);\n    getQuickSortHelper(mainArray, pi + 1, high, animations);\n  }\n}\n\nfunction partition(mainArray, low, high, animations) {\n  let pivot = mainArray[high];\n  let i = low - 1;\n  let j = low;\n\n  for (j = low; j < high; j++) {\n    animations.push([j, high, false, false]);\n    animations.push([j, high, false, true]);\n\n    if (mainArray[j] < pivot) {\n      i++;\n      animations.push([i, mainArray[j], true, true]);\n      animations.push([j, mainArray[i], true, true]);\n      swap(mainArray, i, j);\n    }\n  }\n\n  animations.push([i + 1, mainArray[high], true, true]);\n  animations.push([high, mainArray[i + 1], true, true]);\n  swap(mainArray, i + 1, high);\n  return i + 1;\n}\n\nfunction swap(array, x, y) {\n  // animations.push([x, high, false, false]);\n  // animations.push([x, high, false, true]);\n  // animations.push([x, array[y], true, true]);\n  // animations.push([y, array[x], true, true]);\n  let temp = array[x];\n  array[x] = array[y];\n  array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) {\n    return;\n  }\n\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k] = auxiliaryArray[i];\n      k++;\n      i++;\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k] = auxiliaryArray[j];\n      k++;\n      j++;\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k] = auxiliaryArray[i];\n    k++;\n    i++;\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k] = auxiliaryArray[j];\n    k++;\n    j++;\n  }\n}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingAlgorithms.js"],"names":["getHeapSortAnimations","array","animations","length","getHeapSortHelper","console","log","mainArray","low","high","n","i","heapify","j","swap","getQuickSortAnimations","getQuickSortHelper","pi","partition","pivot","push","x","y","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","startIdx","endIdx","middleIdx","Math","floor","doMerge","k"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EAAqC;AACxC,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAsB;AAClB,WAAOF,KAAP;AACH;;AACDG,EAAAA,iBAAiB,CAACH,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BD,UAA7B,CAAjB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,SAAOC,UAAP;AACH;;AAED,SAASE,iBAAT,CAA2BG,SAA3B,EAAsCC,GAAtC,EAA2CC,IAA3C,EAAiDP,UAAjD,EAA4D;AACxD;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAIQ,CAAC,GAAGH,SAAS,CAACJ,MAAlB,CAnBwD,CAoBxD;;AACA,OAAI,IAAIQ,CAAC,GAAGD,CAAC,GAAG,CAAJ,GAAQ,CAApB,EAAuBC,CAAC,IAAI,CAA5B,EAA+BA,CAAC,EAAhC,EAAmC;AAC/B;AACJ;AACA;AAEIC,IAAAA,OAAO,CAACL,SAAD,EAAYG,CAAZ,EAAeC,CAAf,CAAP;AACH,GA3BuD,CA4BxD;;;AACA,OAAI,IAAIE,CAAC,GAAGH,CAAC,GAAE,CAAf,EAAkBG,CAAC,IAAI,CAAvB,EAA0BA,CAAC,EAA3B,EAA8B;AAC1BC,IAAAA,IAAI,CAACP,SAAD,CAAJ;AACAK,IAAAA,OAAO,CAACL,SAAD,EAAYM,CAAZ,EAAgB,CAAhB,CAAP;AACH;AACJ;;AAID,OAAO,SAASE,sBAAT,CAAgCd,KAAhC,EAAsC;AACzC,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAsB;AAClB,WAAOF,KAAP;AACH;;AACDe,EAAAA,kBAAkB,CAACf,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BD,UAA7B,CAAlB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,SAAOC,UAAP;AACH;;AAED,SAASc,kBAAT,CAA4BT,SAA5B,EAAuCC,GAAvC,EAA4CC,IAA5C,EAAkDP,UAAlD,EAA6D;AACzD,MAAGM,GAAG,GAAGC,IAAT,EAAc;AACV,QAAIQ,EAAE,GAAGC,SAAS,CAACX,SAAD,EAAYC,GAAZ,EAAiBC,IAAjB,EAAuBP,UAAvB,CAAlB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYW,EAAZ;AACAD,IAAAA,kBAAkB,CAACT,SAAD,EAAYC,GAAZ,EAAiBS,EAAE,GAAC,CAApB,EAAuBf,UAAvB,CAAlB;AACAc,IAAAA,kBAAkB,CAACT,SAAD,EAAYU,EAAE,GAAC,CAAf,EAAkBR,IAAlB,EAAwBP,UAAxB,CAAlB;AACH;AACJ;;AAED,SAASgB,SAAT,CAAmBX,SAAnB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyCP,UAAzC,EAAoD;AAChD,MAAIiB,KAAK,GAAGZ,SAAS,CAACE,IAAD,CAArB;AACA,MAAIE,CAAC,GAAGH,GAAG,GAAG,CAAd;AACA,MAAIK,CAAC,GAAGL,GAAR;;AAEA,OAAIK,CAAC,GAAGL,GAAR,EAAaK,CAAC,GAAGJ,IAAjB,EAAuBI,CAAC,EAAxB,EAA4B;AACxBX,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACP,CAAD,EAAGJ,IAAH,EAAS,KAAT,EAAgB,KAAhB,CAAhB;AACAP,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACP,CAAD,EAAGJ,IAAH,EAAS,KAAT,EAAgB,IAAhB,CAAhB;;AACA,QAAGF,SAAS,CAACM,CAAD,CAAT,GAAeM,KAAlB,EAAwB;AACpBR,MAAAA,CAAC;AACDT,MAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACT,CAAD,EAAIJ,SAAS,CAACM,CAAD,CAAb,EAAkB,IAAlB,EAAwB,IAAxB,CAAhB;AACAX,MAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACP,CAAD,EAAIN,SAAS,CAACI,CAAD,CAAb,EAAkB,IAAlB,EAAwB,IAAxB,CAAhB;AACAG,MAAAA,IAAI,CAACP,SAAD,EAAYI,CAAZ,EAAeE,CAAf,CAAJ;AACH;AACJ;;AACDX,EAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACT,CAAC,GAAC,CAAH,EAAMJ,SAAS,CAACE,IAAD,CAAf,EAAuB,IAAvB,EAA6B,IAA7B,CAAhB;AACAP,EAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACX,IAAD,EAAOF,SAAS,CAACI,CAAC,GAAC,CAAH,CAAhB,EAAuB,IAAvB,EAA6B,IAA7B,CAAhB;AACAG,EAAAA,IAAI,CAACP,SAAD,EAAYI,CAAC,GAAC,CAAd,EAAiBF,IAAjB,CAAJ;AAEA,SAAOE,CAAC,GAAG,CAAX;AACH;;AAED,SAASG,IAAT,CAAcb,KAAd,EAAqBoB,CAArB,EAAyBC,CAAzB,EAA2B;AACvB;AACA;AACA;AACA;AACA,MAAIC,IAAI,GAAGtB,KAAK,CAACoB,CAAD,CAAhB;AACApB,EAAAA,KAAK,CAACoB,CAAD,CAAL,GAAWpB,KAAK,CAACqB,CAAD,CAAhB;AACArB,EAAAA,KAAK,CAACqB,CAAD,CAAL,GAAWC,IAAX;AACH;;AAED,OAAO,SAASC,sBAAT,CAAgCvB,KAAhC,EAAuC;AAC1C,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAsB;AAClB,WAAOF,KAAP;AACH;;AACD,QAAMwB,cAAc,GAAGxB,KAAK,CAACyB,KAAN,EAAvB;AACAC,EAAAA,eAAe,CAAC1B,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BsB,cAA7B,EAA6CvB,UAA7C,CAAf;AACA,SAAOA,UAAP;AACH;;AAED,SAASyB,eAAT,CAAyBpB,SAAzB,EAAoCqB,QAApC,EAA8CC,MAA9C,EAAsDJ,cAAtD,EAAsEvB,UAAtE,EAAkF;AAC9E,MAAI0B,QAAQ,KAAKC,MAAjB,EAAwB;AACpB;AACH;;AACD,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;AACAF,EAAAA,eAAe,CAACF,cAAD,EAAiBG,QAAjB,EAA2BE,SAA3B,EAAsCvB,SAAtC,EAAiDL,UAAjD,CAAf;AACAyB,EAAAA,eAAe,CAACF,cAAD,EAAiBK,SAAS,GAAG,CAA7B,EAAgCD,MAAhC,EAAwCtB,SAAxC,EAAmDL,UAAnD,CAAf;AACA+B,EAAAA,OAAO,CAAC1B,SAAD,EAAYqB,QAAZ,EAAsBE,SAAtB,EAAiCD,MAAjC,EAAyCJ,cAAzC,EAAyDvB,UAAzD,CAAP;AACH;;AAED,SAAS+B,OAAT,CAAiB1B,SAAjB,EAA4BqB,QAA5B,EAAsCE,SAAtC,EAAiDD,MAAjD,EAAyDJ,cAAzD,EAAyEvB,UAAzE,EAAqF;AACjF,MAAIgC,CAAC,GAAGN,QAAR;AACA,MAAIjB,CAAC,GAAGiB,QAAR;AACA,MAAIf,CAAC,GAAGiB,SAAS,GAAG,CAApB;;AAEA,SAAOnB,CAAC,IAAImB,SAAL,IAAkBjB,CAAC,IAAIgB,MAA9B,EAAsC;AAClC;AACA;AACA3B,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACT,CAAD,EAAIE,CAAJ,CAAhB,EAHkC,CAIlC;AACA;;AACAX,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACT,CAAD,EAAIE,CAAJ,CAAhB;;AAEA,QAAIY,cAAc,CAACd,CAAD,CAAd,IAAqBc,cAAc,CAACZ,CAAD,CAAvC,EAA4C;AACxC;AACA;AACAX,MAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACc,CAAD,EAAIT,cAAc,CAACd,CAAD,CAAlB,CAAhB;AACAJ,MAAAA,SAAS,CAAC2B,CAAD,CAAT,GAAeT,cAAc,CAACd,CAAD,CAA7B;AACAuB,MAAAA,CAAC;AACDvB,MAAAA,CAAC;AACJ,KAPD,MAOO;AACH;AACA;AACAT,MAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACc,CAAD,EAAIT,cAAc,CAACZ,CAAD,CAAlB,CAAhB;AACAN,MAAAA,SAAS,CAAC2B,CAAD,CAAT,GAAeT,cAAc,CAACZ,CAAD,CAA7B;AACAqB,MAAAA,CAAC;AACDrB,MAAAA,CAAC;AACJ;AACJ;;AACD,SAAOF,CAAC,IAAImB,SAAZ,EAAuB;AACnB;AACA;AACA5B,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACT,CAAD,EAAIA,CAAJ,CAAhB,EAHmB,CAInB;AACA;;AACAT,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACT,CAAD,EAAIA,CAAJ,CAAhB,EANmB,CAOnB;AACA;;AACAT,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACc,CAAD,EAAIT,cAAc,CAACd,CAAD,CAAlB,CAAhB;AACAJ,IAAAA,SAAS,CAAC2B,CAAD,CAAT,GAAeT,cAAc,CAACd,CAAD,CAA7B;AACAuB,IAAAA,CAAC;AACDvB,IAAAA,CAAC;AACJ;;AACD,SAAOE,CAAC,IAAIgB,MAAZ,EAAoB;AAChB;AACA;AACA3B,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACP,CAAD,EAAIA,CAAJ,CAAhB,EAHgB,CAIhB;AACA;;AACAX,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACP,CAAD,EAAIA,CAAJ,CAAhB,EANgB,CAOhB;AACA;;AACAX,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACc,CAAD,EAAIT,cAAc,CAACZ,CAAD,CAAlB,CAAhB;AACAN,IAAAA,SAAS,CAAC2B,CAAD,CAAT,GAAeT,cAAc,CAACZ,CAAD,CAA7B;AACAqB,IAAAA,CAAC;AACDrB,IAAAA,CAAC;AACJ;AACJ","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n\n//     let i = 0;\n//     let j = 0;\n\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n\n\n\n// /* The main function that implements QuickSort() \n//   arr[] --> Array to be sorted, \n//   low  --> Starting index, \n//   high  --> Ending index */\n// void sort(int arr[], int low, int high) \n// { \n//     if (low < high) \n//     { \n//         /* pi is partitioning index, arr[pi] is  \n//           now at right place */\n//         int pi = partition(arr, low, high); \n\n//         // Recursively sort elements before \n//         // partition and after partition \n//         sort(arr, low, pi-1); \n//         sort(arr, pi+1, high); \n//     } \n// } \nexport function getHeapSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getHeapSortHelper(array, 0, array.length - 1, animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getHeapSortHelper(mainArray, low, high, animations){\n    // int n = arr.length; \n  \n    // // Build heap (rearrange array) \n    // for (int i = n / 2 - 1; i >= 0; i--) \n    //     heapify(arr, n, i); \n\n    // // One by one extract an element from heap \n    // for (int i=n-1; i>=0; i--) \n    // { \n    //     // Move current root to end \n    //     int temp = arr[0]; \n    //     arr[0] = arr[i]; \n    //     arr[i] = temp; \n\n    //     // call max heapify on the reduced heap \n    //     heapify(arr, i, 0); \n    // } \n\n    let n = mainArray.length;\n    //Build Heap\n    for(let i = n / 2 - 1; i >= 0; i--){\n        // int temp = arr[0]; \n    //     arr[0] = arr[i]; \n    //     arr[i] = temp; \n\n        heapify(mainArray, n, i);\n    }\n    // One by one extract an element from heap \n    for(let j = n -1; j >= 0; j--){\n        swap(mainArray, )\n        heapify(mainArray, j,  0);\n    }\n}\n\n\n\nexport function getQuickSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getQuickSortHelper(array, 0, array.length - 1, animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations){\n    if(low < high){\n        let pi = partition(mainArray, low, high, animations);\n        console.log(pi);\n        getQuickSortHelper(mainArray, low, pi-1, animations); \n        getQuickSortHelper(mainArray, pi+1, high, animations); \n    }\n}\n\nfunction partition(mainArray, low, high, animations){\n    let pivot = mainArray[high];\n    let i = low - 1;\n    let j = low;\n\n    for(j = low; j < high; j ++){\n        animations.push([j,high, false, false]);\n        animations.push([j,high, false, true]);\n        if(mainArray[j] < pivot){\n            i++;\n            animations.push([i, mainArray[j], true, true]);\n            animations.push([j, mainArray[i], true, true]);\n            swap(mainArray, i, j)\n        }\n    }\n    animations.push([i+1, mainArray[high], true, true]);\n    animations.push([high, mainArray[i+1], true, true]);\n    swap(mainArray, i+1, high)\n\n    return i + 1;\n}\n\nfunction swap(array, x , y){\n    // animations.push([x, high, false, false]);\n    // animations.push([x, high, false, true]);\n    // animations.push([x, array[y], true, true]);\n    // animations.push([y, array[x], true, true]);\n    let temp = array[x];\n    array[x] = array[y];\n    array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx){\n        return;\n    }\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k] = auxiliaryArray[i];\n            k++;\n            i++;\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k] = auxiliaryArray[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k] = auxiliaryArray[i];\n        k++;\n        i++;\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k] = auxiliaryArray[j];\n        k++;\n        j++;\n    }\n}"]},"metadata":{},"sourceType":"module"}