{"ast":null,"code":"var _jsxFileName = \"/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../SortingAlgorithms.js';\nimport { getQuickSortAnimations } from '../SortingAlgorithms.js'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 100; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 160; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'teal'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = []; // for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n    //     array.push(randomIntFromInterval(5, 730));\n    // }\n\n    for (let i = 8; i > 0; i--) {\n      array.push(i * 10);\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getQuickSortAnimations(this.state.array);\n    console.log(test(animations));\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {} // We leave it as an exercise to the viewer of this code to implement this method.\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  test() {\n    for (let i = 0; i < 50; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice()); // const quickSortedArray = getQuickSortAnimations(array.slice());\n      // const heapSortedArray = getHeapSortAnimations(array.slice());\n      // const bubbleSortedArray = getBubbleSortAnimations(array.slice());\n\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Bubble Sort\"), React.createElement(\"button\", {\n      onClick: () => this.test(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Test Sorting Algorithms (BROKEN)\"));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","setState","mergeSort","animations","console","log","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","test","heapSort","bubbleSort","randomIntFromInterval","javaScriptSortedArray","slice","sort","a","b","mergeSortedArray","arraysAreEqual","render","map","value","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms.js';\nimport {getQuickSortAnimations} from '../SortingAlgorithms.js';\n\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 100;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 160;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'teal';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n    array: [],\n    };\n}\n\ncomponentDidMount() {\n    this.resetArray();\n}\n\nresetArray() {\n    const array = [];\n    // for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n    //     array.push(randomIntFromInterval(5, 730));\n    // }\n    for (let i = 8; i > 0; i--) {\n        array.push(i*10);\n    }\n    this.setState({array});\n}\n\nmergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n        if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = (i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR);\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n        } else {\n            setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n        }\n    }\n}\n\nquickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getQuickSortAnimations(this.state.array);\n    console.log(test(animations));\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2;\n        if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = (i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR);\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n        } else {\n            setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n        }\n    }\n}\n\nheapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n}\n\nbubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n}\n\n// NOTE: This method will only work if your sorting algorithms actually return\n// the sorted arrays; if they return the animations (as they currently do), then\n// this method will be broken.\ntest() {\n    for (let i = 0; i < 50; i++) {\n    const array = [];\n    const length = randomIntFromInterval(1, 1000);\n    for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n    }\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    const mergeSortedArray = getMergeSortAnimations(array.slice());\n    // const quickSortedArray = getQuickSortAnimations(array.slice());\n    // const heapSortedArray = getHeapSortAnimations(array.slice());\n    // const bubbleSortedArray = getBubbleSortAnimations(array.slice());\n    console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n}\n\nrender() {\n    const {array} = this.state;\n\n    return (\n    <div className=\"array-container\">\n        {array.map((value, idx) => (\n        <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.test()}>\n        Test Sorting Algorithms (BROKEN)\n        </button>\n    </div>\n    );\n}\n}\n\nfunction randomIntFromInterval(min, max) {\n// min and max included\nreturn Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length){\n        return false;\n    }\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}