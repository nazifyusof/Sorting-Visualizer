{"ast":null,"code":"// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n//     let i = 0;\n//     let j = 0;\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\nexport function getBubbleSortAnimations(array) {\n  let animations = [];\n  let n = array.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      animations.push([j, j + 1, false, false]);\n      animations.push([j, j + 1, false, true]);\n\n      if (array[j] > array[j + 1]) {\n        animations.push([j, arra[j + 1], true, true]);\n        animations.push([j + 1, array[j], true, true]);\n        swap(array, j, j + 1);\n      }\n    }\n  }\n\n  console.log(array);\n  return animations;\n}\nexport function getHeapSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getHeapSortHelper(array, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction getHeapSortHelper(mainArray, animations) {\n  let n = mainArray.length; //Build Heap\n\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(mainArray, n, i, animations);\n  } // One by one extract an element from heap \n\n\n  for (let j = n - 1; j >= 0; j--) {\n    animations.push([0, mainArray[j], true, true]);\n    animations.push([j, mainArray[0], true, true]);\n    swap(mainArray, 0, j);\n    heapify(mainArray, j, 0, animations);\n  }\n}\n\nfunction heapify(mainArray, n, i, animations) {\n  let largest = i; // Initialize largest as root \n\n  let l = 2 * i + 1; // left = 2*i + 1 \n\n  let r = 2 * i + 2; // right = 2*i + 2 \n\n  if (l < mainArray.length) {\n    animations.push([largest, l, false, false]);\n    animations.push([largest, l, false, true]);\n  } // If left child is larger than root \n\n\n  if (l < n && mainArray[l] > mainArray[largest]) {\n    largest = l;\n  }\n\n  if (r < mainArray.length) {\n    animations.push([largest, r, false, false]);\n    animations.push([largest, r, false, true]);\n  } // If right child is larger than largest so far \n\n\n  if (r < n && mainArray[r] > mainArray[largest]) {\n    largest = r;\n  } // If largest is not root \n\n\n  if (largest != i) {\n    animations.push([i, mainArray[largest], true, true]);\n    animations.push([largest, mainArray[i], true, true]);\n    swap(mainArray, i, largest); // Recursively heapify the affected sub-tree \n\n    heapify(mainArray, n, largest, animations);\n  }\n}\n\nexport function getQuickSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getQuickSortHelper(array, 0, array.length - 1, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations) {\n  if (low < high) {\n    let pi = partition(mainArray, low, high, animations);\n    console.log(pi);\n    getQuickSortHelper(mainArray, low, pi - 1, animations);\n    getQuickSortHelper(mainArray, pi + 1, high, animations);\n  }\n}\n\nfunction partition(mainArray, low, high, animations) {\n  let pivot = mainArray[high];\n  let i = low - 1;\n  let j = low;\n\n  for (j = low; j < high; j++) {\n    animations.push([j, high, false, false]);\n    animations.push([j, high, false, true]);\n\n    if (mainArray[j] < pivot) {\n      i++;\n      animations.push([i, mainArray[j], true, true]);\n      animations.push([j, mainArray[i], true, true]);\n      swap(mainArray, i, j);\n    }\n  }\n\n  animations.push([i + 1, mainArray[high], true, true]);\n  animations.push([high, mainArray[i + 1], true, true]);\n  swap(mainArray, i + 1, high);\n  return i + 1;\n}\n\nfunction swap(array, x, y) {\n  // animations.push([x, high, false, false]);\n  // animations.push([x, high, false, true]);\n  // animations.push([x, array[y], true, true]);\n  // animations.push([y, array[x], true, true]);\n  let temp = array[x];\n  array[x] = array[y];\n  array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) {\n    return;\n  }\n\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k] = auxiliaryArray[i];\n      k++;\n      i++;\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k] = auxiliaryArray[j];\n      k++;\n      j++;\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k] = auxiliaryArray[i];\n    k++;\n    i++;\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k] = auxiliaryArray[j];\n    k++;\n    j++;\n  }\n}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/docs/src/SortingAlgorithms.js"],"names":["getBubbleSortAnimations","array","animations","n","length","i","j","push","arra","swap","console","log","getHeapSortAnimations","getHeapSortHelper","mainArray","Math","floor","heapify","largest","l","r","getQuickSortAnimations","getQuickSortHelper","low","high","pi","partition","pivot","x","y","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","startIdx","endIdx","middleIdx","doMerge","k"],"mappings":"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","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n\n//     let i = 0;\n//     let j = 0;\n\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n\nexport function getBubbleSortAnimations(array){\n    let animations = [];\n    let n = array.length; \n    for (let i = 0; i < n-1; i++){ \n        for (let j = 0; j < n-i-1; j++){\n            animations.push([j, j+1, false, false]);\n            animations.push([j, j+1, false, true]);\n            if (array[j] > array[j+1]) \n            { \n                animations.push([j, arra[j+1], true, true]);\n                animations.push([j+1, array[j], true, true]);\n                swap(array, j, j + 1);\n            } \n        }\n    }\n    console.log(array);\n    return animations;      \n}\n\nexport function getHeapSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getHeapSortHelper(array,animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getHeapSortHelper(mainArray, animations){\n    let n = mainArray.length;\n    //Build Heap\n    for(let i = Math.floor(n / 2) -1; i >= 0; i--){\n        heapify(mainArray, n, i, animations);\n    }\n    // One by one extract an element from heap \n    for(let j = n-1; j >= 0; j--){\n        animations.push([0, mainArray[j], true, true]);\n        animations.push([j, mainArray[0], true, true]);\n        swap(mainArray, 0, j );\n        heapify(mainArray, j,  0, animations);\n    }\n}\n\nfunction heapify(mainArray, n, i, animations){\n    let largest = i; // Initialize largest as root \n    let l = 2*i + 1; // left = 2*i + 1 \n    let r = 2*i + 2; // right = 2*i + 2 \n\n    if(l < mainArray.length){\n        animations.push([largest, l, false, false]);\n        animations.push([largest, l, false, true]);\n    }\n    // If left child is larger than root \n    if (l < n && mainArray[l] > mainArray[largest]) {\n        largest = l; \n    }\n\n    if(r < mainArray.length){   \n        animations.push([largest, r, false, false]);\n        animations.push([largest, r, false, true]);\n    }\n    // If right child is larger than largest so far \n    if (r < n && mainArray[r] > mainArray[largest]){\n        largest = r; \n    }   \n    // If largest is not root \n    if (largest != i){ \n        animations.push([i, mainArray[largest], true, true]);\n        animations.push([largest, mainArray[i], true, true]);\n        swap(mainArray, i, largest);\n        // Recursively heapify the affected sub-tree \n        heapify(mainArray, n, largest, animations); \n    } \n}\n\nexport function getQuickSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getQuickSortHelper(array, 0, array.length - 1, animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations){\n    if(low < high){\n        let pi = partition(mainArray, low, high, animations);\n        console.log(pi);\n        getQuickSortHelper(mainArray, low, pi-1, animations); \n        getQuickSortHelper(mainArray, pi+1, high, animations); \n    }\n}\n\nfunction partition(mainArray, low, high, animations){\n    let pivot = mainArray[high];\n    let i = low - 1;\n    let j = low;\n\n    for(j = low; j < high; j ++){\n        animations.push([j,high, false, false]);\n        animations.push([j,high, false, true]);\n        if(mainArray[j] < pivot){\n            i++;\n            animations.push([i, mainArray[j], true, true]);\n            animations.push([j, mainArray[i], true, true]);\n            swap(mainArray, i, j)\n        }\n    }\n    animations.push([i+1, mainArray[high], true, true]);\n    animations.push([high, mainArray[i+1], true, true]);\n    swap(mainArray, i+1, high)\n\n    return i + 1;\n}\n\nfunction swap(array, x , y){\n    // animations.push([x, high, false, false]);\n    // animations.push([x, high, false, true]);\n    // animations.push([x, array[y], true, true]);\n    // animations.push([y, array[x], true, true]);\n    let temp = array[x];\n    array[x] = array[y];\n    array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx){\n        return;\n    }\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k] = auxiliaryArray[i];\n            k++;\n            i++;\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k] = auxiliaryArray[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k] = auxiliaryArray[i];\n        k++;\n        i++;\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k] = auxiliaryArray[j];\n        k++;\n        j++;\n    }\n}"]},"metadata":{},"sourceType":"module"}