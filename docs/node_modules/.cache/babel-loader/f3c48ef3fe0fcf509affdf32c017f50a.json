{"ast":null,"code":"import _slicedToArray from\"/Users/owner/myProject/Sorting-Visualizer/docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/owner/myProject/Sorting-Visualizer/docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/owner/myProject/Sorting-Visualizer/docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/owner/myProject/Sorting-Visualizer/docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/owner/myProject/Sorting-Visualizer/docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/owner/myProject/Sorting-Visualizer/docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import'./SortingVisualizer.css';import{getMergeSortAnimations}from'../SortingAlgorithms.js';import{getQuickSortAnimations}from'../SortingAlgorithms.js';import{getHeapSortAnimations}from'../SortingAlgorithms.js';import{getBubbleSortAnimations}from'../SortingAlgorithms.js';// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS=1;// Change this value for the number of bars (value) in the array.\nvar NUMBER_OF_ARRAY_BARS=160;// This is the main color of the array bars.\nvar PRIMARY_COLOR='teal';// This is the color of array bars that are being compared throughout the animations.\nvar SECONDARY_COLOR='red';var SortingVisualizer=/*#__PURE__*/function(_React$Component){_inherits(SortingVisualizer,_React$Component);function SortingVisualizer(props){var _this;_classCallCheck(this,SortingVisualizer);_this=_possibleConstructorReturn(this,_getPrototypeOf(SortingVisualizer).call(this,props));_this.state={array:[]};return _this;}_createClass(SortingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){this.resetArray();}},{key:\"resetArray\",value:function resetArray(){var array=[];// const array = [40, 100, 30, 50, 10];\nfor(var i=0;i<NUMBER_OF_ARRAY_BARS;i++){array.push(randomIntFromInterval(5,730));}// for (let i = 8; i > 0; i--) {\n//     array.push(i*10);\n// }\nthis.setState({array:array});}},{key:\"mergeSort\",value:function mergeSort(){// We leave it as an exercise to the viewer of this code to implement this method.\nvar animations=getMergeSortAnimations(this.state.array);console.log(animations);var _loop=function _loop(i){var arrayBars=document.getElementsByClassName('array-bar');var isColorChange=i%3!==2;if(isColorChange){var _animations$i=_slicedToArray(animations[i],2),barOneIdx=_animations$i[0],barTwoIdx=_animations$i[1];var barOneStyle=arrayBars[barOneIdx].style;var barTwoStyle=arrayBars[barTwoIdx].style;var color=i%3===0?SECONDARY_COLOR:PRIMARY_COLOR;setTimeout(function(){barOneStyle.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else{setTimeout(function(){var _animations$i2=_slicedToArray(animations[i],2),barOneIdx=_animations$i2[0],newHeight=_animations$i2[1];var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(newHeight,\"px\");},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop(i);}}},{key:\"quickSort\",value:function quickSort(){var animations=getQuickSortAnimations(this.state.array);console.log(animations);var _loop2=function _loop2(i){var arrayBars=document.getElementsByClassName('array-bar');var _animations$i3=_slicedToArray(animations[i],4),barOneIdx=_animations$i3[0],barTwoIdx=_animations$i3[1],flag1=_animations$i3[2],flag2=_animations$i3[3];var go=flag1===true;if(!go){var _animations$i4=_slicedToArray(animations[i],4),_barOneIdx=_animations$i4[0],_barTwoIdx=_animations$i4[1],_flag=_animations$i4[2],_flag2=_animations$i4[3];var barOneStyle=arrayBars[_barOneIdx].style;var barTwoStyle=arrayBars[_barTwoIdx].style;var color=_flag2===true?PRIMARY_COLOR:SECONDARY_COLOR;setTimeout(function(){barOneStyle.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else{setTimeout(function(){var _animations$i5=_slicedToArray(animations[i],3),barOneIdx=_animations$i5[0],newHeight=_animations$i5[1],flag=_animations$i5[2];var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(newHeight,\"px\");},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop2(i);}}},{key:\"heapSort\",value:function heapSort(){// We leave it as an exercise to the viewer of this code to implement this method.\nvar animations=getHeapSortAnimations(this.state.array);console.log(animations);var _loop3=function _loop3(i){var arrayBars=document.getElementsByClassName('array-bar');var _animations$i6=_slicedToArray(animations[i],4),barOneIdx=_animations$i6[0],barTwoIdx=_animations$i6[1],flag1=_animations$i6[2],flag2=_animations$i6[3];var go=flag1===true;if(!go){var _animations$i7=_slicedToArray(animations[i],4),_barOneIdx2=_animations$i7[0],_barTwoIdx2=_animations$i7[1],_flag3=_animations$i7[2],_flag4=_animations$i7[3];var barOneStyle=arrayBars[_barOneIdx2].style;var barTwoStyle=arrayBars[_barTwoIdx2].style;var color=_flag4===true?PRIMARY_COLOR:SECONDARY_COLOR;setTimeout(function(){barOneStyle.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else{setTimeout(function(){var _animations$i8=_slicedToArray(animations[i],3),barOneIdx=_animations$i8[0],newHeight=_animations$i8[1],flag=_animations$i8[2];var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(newHeight,\"px\");},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop3(i);}}},{key:\"bubbleSort\",value:function bubbleSort(){// We leave it as an exercise to the viewer of this code to implement this method.\nvar animations=getBubbleSortAnimations(this.state.array);console.log(animations);var _loop4=function _loop4(i){var arrayBars=document.getElementsByClassName('array-bar');var _animations$i9=_slicedToArray(animations[i],4),barOneIdx=_animations$i9[0],barTwoIdx=_animations$i9[1],flag1=_animations$i9[2],flag2=_animations$i9[3];var go=flag1===true;if(!go){var _animations$i10=_slicedToArray(animations[i],4),_barOneIdx3=_animations$i10[0],_barTwoIdx3=_animations$i10[1],_flag5=_animations$i10[2],_flag6=_animations$i10[3];var barOneStyle=arrayBars[_barOneIdx3].style;var barTwoStyle=arrayBars[_barTwoIdx3].style;var color=_flag6===true?PRIMARY_COLOR:SECONDARY_COLOR;setTimeout(function(){barOneStyle.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else{setTimeout(function(){var _animations$i11=_slicedToArray(animations[i],3),barOneIdx=_animations$i11[0],newHeight=_animations$i11[1],flag=_animations$i11[2];var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(newHeight,\"px\");},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop4(i);}}// NOTE: This method will only work if your sorting algorithms actually return\n// the sorted arrays; if they return the animations (as they currently do), then\n// this method will be broken.\n// test() {\n//     for (let i = 0; i < 50; i++) {\n//     const array = [];\n//     const length = randomIntFromInterval(1, 1000);\n//     for (let i = 0; i < length; i++) {\n//         array.push(randomIntFromInterval(-1000, 1000));\n//     }\n//     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//     // const mergeSortedArray = getMergeSortAnimations(array.slice());\n//     const quickSortedArray = getQuickSortAnimations(array.slice());\n//     // const heapSortedArray = getHeapSortAnimations(array.slice());\n//     // const bubbleSortedArray = getBubbleSortAnimations(array.slice());\n//     console.log(arraysAreEqual(javaScriptSortedArray, quickSortedArray));\n//     }\n// }\n},{key:\"render\",value:function render(){var _this2=this;var array=this.state.array;return React.createElement(\"div\",{className:\"array-container\"},array.map(function(value,idx){return React.createElement(\"div\",{className:\"array-bar\",key:idx,style:{backgroundColor:PRIMARY_COLOR,height:\"\".concat(value,\"px\")}});}),React.createElement(\"button\",{onClick:function onClick(){return _this2.resetArray();}},\"Generate New Array\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.mergeSort();}},\"Merge Sort\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.quickSort();}},\"Quick Sort\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.heapSort();}},\"Heap Sort\"),React.createElement(\"button\",{onClick:function onClick(){return _this2.bubbleSort();}},\"Bubble Sort\"));}}]);return SortingVisualizer;}(React.Component);export{SortingVisualizer as default};function randomIntFromInterval(min,max){// min and max included\nreturn Math.floor(Math.random()*(max-min+1)+min);}function arraysAreEqual(arrayOne,arrayTwo){if(arrayOne.length!==arrayTwo.length){return false;}for(var i=0;i<arrayOne.length;i++){if(arrayOne[i]!==arrayTwo[i]){return false;}}return true;}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/docs/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getHeapSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","array","resetArray","i","push","randomIntFromInterval","setState","animations","console","log","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","length","flag1","flag2","go","flag","map","value","idx","mergeSort","quickSort","heapSort","bubbleSort","Component","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms.js';\nimport {getQuickSortAnimations} from '../SortingAlgorithms.js';\nimport {getHeapSortAnimations} from '../SortingAlgorithms.js';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms.js';\n\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 160;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'teal';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n    array: [],\n    };\n}\n\ncomponentDidMount() {\n    this.resetArray();\n}\n\nresetArray() {\n    const array = [];\n    // const array = [40, 100, 30, 50, 10];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n        array.push(randomIntFromInterval(5, 730));\n    }\n\n    // for (let i = 8; i > 0; i--) {\n    //     array.push(i*10);\n    // }\n    this.setState({array});\n}\n\nmergeSort() {\n   // We leave it as an exercise to the viewer of this code to implement this method.\n   const animations = getMergeSortAnimations(this.state.array);\n   console.log(animations);\n   for (let i = 0; i < animations.length; i++) {\n       const arrayBars = document.getElementsByClassName('array-bar');\n       const isColorChange = i % 3 !== 2;\n       if (isColorChange) {\n           const [barOneIdx, barTwoIdx] = animations[i];\n           const barOneStyle = arrayBars[barOneIdx].style;\n           const barTwoStyle = arrayBars[barTwoIdx].style;\n           const color = (i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR);\n           setTimeout(() => {\n               barOneStyle.backgroundColor = color;\n               barTwoStyle.backgroundColor = color;\n               }, i * ANIMATION_SPEED_MS);\n       } else {\n           setTimeout(() => {\n           const [barOneIdx, newHeight] = animations[i];\n           const barOneStyle = arrayBars[barOneIdx].style;\n           barOneStyle.height = `${newHeight}px`;\n           }, i * ANIMATION_SPEED_MS);\n       }\n   }\n}\n\nquickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n        const go = flag1 === true;\n        if (!go) {\n            const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = (flag2 === true ? PRIMARY_COLOR : SECONDARY_COLOR);\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n        } else {\n            setTimeout(() => {\n            const [barOneIdx, newHeight, flag] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n        }\n    }\n}\n\nheapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getHeapSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n        const go = flag1 === true;\n        if (!go) {\n            const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = (flag2 === true ? PRIMARY_COLOR : SECONDARY_COLOR);\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n        } else {\n            setTimeout(() => {\n            const [barOneIdx, newHeight, flag] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n        }\n    }\n}\n\nbubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n        const go = flag1 === true;\n        if (!go) {\n            const [barOneIdx, barTwoIdx, flag1, flag2] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = (flag2 === true ? PRIMARY_COLOR : SECONDARY_COLOR);\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n        } else {\n            setTimeout(() => {\n            const [barOneIdx, newHeight, flag] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n        }\n    }\n}\n\n// NOTE: This method will only work if your sorting algorithms actually return\n// the sorted arrays; if they return the animations (as they currently do), then\n// this method will be broken.\n// test() {\n//     for (let i = 0; i < 50; i++) {\n//     const array = [];\n//     const length = randomIntFromInterval(1, 1000);\n//     for (let i = 0; i < length; i++) {\n//         array.push(randomIntFromInterval(-1000, 1000));\n//     }\n//     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//     // const mergeSortedArray = getMergeSortAnimations(array.slice());\n//     const quickSortedArray = getQuickSortAnimations(array.slice());\n//     // const heapSortedArray = getHeapSortAnimations(array.slice());\n//     // const bubbleSortedArray = getBubbleSortAnimations(array.slice());\n//     console.log(arraysAreEqual(javaScriptSortedArray, quickSortedArray));\n//     }\n// }\n\nrender() {\n    const {array} = this.state;\n\n    return (\n    <div className=\"array-container\">\n        {array.map((value, idx) => (\n        <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        {/* <button onClick={() => this.test()}>\n        Test Sorting Algorithms (BROKEN)\n        </button> */}\n    </div>\n    );\n}\n}\n\nfunction randomIntFromInterval(min, max) {\n// min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length){\n        return false;\n    }\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}