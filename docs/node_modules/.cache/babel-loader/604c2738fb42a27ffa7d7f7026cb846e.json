{"ast":null,"code":"// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n//     let i = 0;\n//     let j = 0;\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n// int partition(int arr[], int low, int high) \n// { \n//     int pivot = arr[high];  \n//     int i = (low-1); // index of smaller element \n//     for (int j=low; j<high; j++) \n//     { \n//         // If current element is smaller than the pivot \n//         if (arr[j] < pivot) \n//         { \n//             i++; \n//             // swap arr[i] and arr[j] \n//             int temp = arr[i]; \n//             arr[i] = arr[j]; \n//             arr[j] = temp; \n//         } \n//     } \n//     // swap arr[i+1] and arr[high] (or pivot) \n//     int temp = arr[i+1]; \n//     arr[i+1] = arr[high]; \n//     arr[high] = temp; \n//     return i+1; \n// } \n// /* The main function that implements QuickSort() \n//   arr[] --> Array to be sorted, \n//   low  --> Starting index, \n//   high  --> Ending index */\n// void sort(int arr[], int low, int high) \n// { \n//     if (low < high) \n//     { \n//         /* pi is partitioning index, arr[pi] is  \n//           now at right place */\n//         int pi = partition(arr, low, high); \n//         // Recursively sort elements before \n//         // partition and after partition \n//         sort(arr, low, pi-1); \n//         sort(arr, pi+1, high); \n//     } \n// } \nexport function getQuickSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getQuickSortHelper(array, 0, array.length - 1, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations) {\n  if (low < high) {\n    let pi = partition(mainArray, low, high, animations);\n    getQuickSortHelper(mainArray, low, pi - 1, animations);\n    getQuickSortHelper(mainArray, pi + 1, high, animations);\n  }\n}\n\nfunction partition(mainArray, low, high, animations) {\n  let pivot = mainArray[high];\n  let i = low - 1;\n  let jFinal = 0;\n\n  for (let j = low; j < high; j++) {\n    animations.push([j, high, false, false]);\n    animations.push([j, high, false, true]);\n\n    if (mainArray[j] < pivot) {\n      i++;\n      swap(mainArray, i, j, animations, high);\n    }\n\n    jFinal = j;\n  }\n\n  swap(mainArray, i + 1, high, animations, high);\n  return i + 1;\n}\n\nfunction swap(array, x, y, animations, high) {\n  animations.push([x, array[y], false, false]);\n  animations.push([x, array[y], false, true]);\n  animations.push([x, array[y], true, true]);\n  let temp = array[x];\n  array[x] = array[y];\n  array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) {\n    return;\n  }\n\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k] = auxiliaryArray[i];\n      k++;\n      i++;\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k] = auxiliaryArray[j];\n      k++;\n      j++;\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k] = auxiliaryArray[i];\n    k++;\n    i++;\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k] = auxiliaryArray[j];\n    k++;\n    j++;\n  }\n}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingAlgorithms.js"],"names":["getQuickSortAnimations","array","animations","length","getQuickSortHelper","console","log","mainArray","low","high","pi","partition","pivot","i","jFinal","j","push","swap","x","y","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","startIdx","endIdx","middleIdx","Math","floor","doMerge","k"],"mappings":"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","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n\n//     let i = 0;\n//     let j = 0;\n\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n\n// int partition(int arr[], int low, int high) \n// { \n//     int pivot = arr[high];  \n//     int i = (low-1); // index of smaller element \n//     for (int j=low; j<high; j++) \n//     { \n//         // If current element is smaller than the pivot \n//         if (arr[j] < pivot) \n//         { \n//             i++; \n\n//             // swap arr[i] and arr[j] \n//             int temp = arr[i]; \n//             arr[i] = arr[j]; \n//             arr[j] = temp; \n//         } \n//     } \n\n//     // swap arr[i+1] and arr[high] (or pivot) \n//     int temp = arr[i+1]; \n//     arr[i+1] = arr[high]; \n//     arr[high] = temp; \n\n//     return i+1; \n// } \n\n\n// /* The main function that implements QuickSort() \n//   arr[] --> Array to be sorted, \n//   low  --> Starting index, \n//   high  --> Ending index */\n// void sort(int arr[], int low, int high) \n// { \n//     if (low < high) \n//     { \n//         /* pi is partitioning index, arr[pi] is  \n//           now at right place */\n//         int pi = partition(arr, low, high); \n\n//         // Recursively sort elements before \n//         // partition and after partition \n//         sort(arr, low, pi-1); \n//         sort(arr, pi+1, high); \n//     } \n// } \n\nexport function getQuickSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getQuickSortHelper(array, 0, array.length - 1, animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations){\n    if(low < high){\n        let pi = partition(mainArray, low, high, animations); \n        getQuickSortHelper(mainArray, low, pi-1, animations); \n        getQuickSortHelper(mainArray, pi+1, high, animations); \n    }\n}\n\nfunction partition(mainArray, low, high, animations){\n    let pivot = mainArray[high];\n    let i = low - 1;\n\n    let jFinal = 0;\n    for(let j = low; j < high; j ++){\n        animations.push([j,high, false, false]);\n        animations.push([j,high, false, true]);\n        if(mainArray[j] < pivot){\n            i++;\n            swap(mainArray, i, j,animations, high)\n        }\n        jFinal = j;\n    }\n    \n    swap(mainArray, i+1, high, animations, high)\n\n    return i + 1;\n}\n\nfunction swap(array, x , y, animations, high){\n    animations.push([x, array[y], false, false]);\n    animations.push([x, array[y], false, true]);\n    animations.push([x, array[y], true, true]);\n    let temp = array[x];\n    array[x] = array[y];\n    array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx){\n        return;\n    }\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k] = auxiliaryArray[i];\n            k++;\n            i++;\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k] = auxiliaryArray[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k] = auxiliaryArray[i];\n        k++;\n        i++;\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k] = auxiliaryArray[j];\n        k++;\n        j++;\n    }\n}"]},"metadata":{},"sourceType":"module"}