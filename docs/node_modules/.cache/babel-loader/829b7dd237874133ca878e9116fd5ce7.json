{"ast":null,"code":"// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n//     let i = 0;\n//     let j = 0;\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\nexport function getHeapSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getHeapSortHelper(array, animations);\n  return animations;\n}\n\nfunction getHeapSortHelper(mainArray, animations) {\n  let n = mainArray.length; //Build Heap\n\n  for (let i = n / 2 - 1; i >= 0; i--) {\n    heapify(mainArray, n, i, animations);\n  } // One by one extract an element from heap \n\n\n  for (let j = n - 1; j >= 0; j--) {\n    swap(mainArray, 0, j);\n    heapify(mainArray, j, 0, animations);\n  }\n}\n\nfunction heapify(mainArray, n, i, animations) {\n  let largest = i; // Initialize largest as root \n\n  let l = 2 * i + 1; // left = 2*i + 1 \n\n  let r = 2 * i + 2; // right = 2*i + 2 \n\n  let tempN = n;\n  console.log(n);\n  animations.push([tempN, l, false, false]);\n  animations.push([tempN, l, false, true]); // If left child is larger than root \n\n  if (l < n && mainArray[l] > mainArray[largest]) {\n    largest = l;\n  } // If right child is larger than largest so far \n\n\n  if (r < n && mainArray[r] > mainArray[largest]) {\n    largest = r;\n  } // If largest is not root \n\n\n  if (largest != i) {\n    swap(mainArray, i, largest); // Recursively heapify the affected sub-tree \n\n    heapify(mainArray, n, largest, animations);\n  }\n}\n\nexport function getQuickSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getQuickSortHelper(array, 0, array.length - 1, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations) {\n  if (low < high) {\n    let pi = partition(mainArray, low, high, animations);\n    console.log(pi);\n    getQuickSortHelper(mainArray, low, pi - 1, animations);\n    getQuickSortHelper(mainArray, pi + 1, high, animations);\n  }\n}\n\nfunction partition(mainArray, low, high, animations) {\n  let pivot = mainArray[high];\n  let i = low - 1;\n  let j = low;\n\n  for (j = low; j < high; j++) {\n    animations.push([j, high, false, false]);\n    animations.push([j, high, false, true]);\n\n    if (mainArray[j] < pivot) {\n      i++;\n      animations.push([i, mainArray[j], true, true]);\n      animations.push([j, mainArray[i], true, true]);\n      swap(mainArray, i, j);\n    }\n  }\n\n  animations.push([i + 1, mainArray[high], true, true]);\n  animations.push([high, mainArray[i + 1], true, true]);\n  swap(mainArray, i + 1, high);\n  return i + 1;\n}\n\nfunction swap(array, x, y) {\n  // animations.push([x, high, false, false]);\n  // animations.push([x, high, false, true]);\n  // animations.push([x, array[y], true, true]);\n  // animations.push([y, array[x], true, true]);\n  let temp = array[x];\n  array[x] = array[y];\n  array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) {\n    return;\n  }\n\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k] = auxiliaryArray[i];\n      k++;\n      i++;\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k] = auxiliaryArray[j];\n      k++;\n      j++;\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k] = auxiliaryArray[i];\n    k++;\n    i++;\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k] = auxiliaryArray[j];\n    k++;\n    j++;\n  }\n}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingAlgorithms.js"],"names":["getHeapSortAnimations","array","animations","length","getHeapSortHelper","mainArray","n","i","heapify","j","swap","largest","l","r","tempN","console","log","push","getQuickSortAnimations","getQuickSortHelper","low","high","pi","partition","pivot","x","y","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","startIdx","endIdx","middleIdx","Math","floor","doMerge","k"],"mappings":"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","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n\n//     let i = 0;\n//     let j = 0;\n\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n\nexport function getHeapSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getHeapSortHelper(array,animations);\n    return animations;\n}\n\nfunction getHeapSortHelper(mainArray, animations){\n    let n = mainArray.length;\n    //Build Heap\n    for(let i = n / 2 - 1; i >= 0; i--){\n        heapify(mainArray, n, i, animations);\n    }\n    // One by one extract an element from heap \n    for(let j = n -1; j >= 0; j--){\n        swap(mainArray, 0, j );\n        heapify(mainArray, j,  0, animations);\n    }\n}\n\nfunction heapify(mainArray, n, i, animations){\n    let largest = i; // Initialize largest as root \n    let l = 2*i + 1; // left = 2*i + 1 \n    let r = 2*i + 2; // right = 2*i + 2 \n    let tempN = n;\n    console.log(n);\n    animations.push([tempN, l, false, false]);\n    animations.push([tempN, l, false, true]);\n    // If left child is larger than root \n    if (l < n && mainArray[l] > mainArray[largest]) {\n        largest = l; \n    }\n    // If right child is larger than largest so far \n    if (r < n && mainArray[r] > mainArray[largest]){\n        largest = r; \n    }   \n    // If largest is not root \n    if (largest != i){ \n        swap(mainArray, i, largest);\n        // Recursively heapify the affected sub-tree \n        heapify(mainArray, n, largest, animations); \n    } \n}\n\nexport function getQuickSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getQuickSortHelper(array, 0, array.length - 1, animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations){\n    if(low < high){\n        let pi = partition(mainArray, low, high, animations);\n        console.log(pi);\n        getQuickSortHelper(mainArray, low, pi-1, animations); \n        getQuickSortHelper(mainArray, pi+1, high, animations); \n    }\n}\n\nfunction partition(mainArray, low, high, animations){\n    let pivot = mainArray[high];\n    let i = low - 1;\n    let j = low;\n\n    for(j = low; j < high; j ++){\n        animations.push([j,high, false, false]);\n        animations.push([j,high, false, true]);\n        if(mainArray[j] < pivot){\n            i++;\n            animations.push([i, mainArray[j], true, true]);\n            animations.push([j, mainArray[i], true, true]);\n            swap(mainArray, i, j)\n        }\n    }\n    animations.push([i+1, mainArray[high], true, true]);\n    animations.push([high, mainArray[i+1], true, true]);\n    swap(mainArray, i+1, high)\n\n    return i + 1;\n}\n\nfunction swap(array, x , y){\n    // animations.push([x, high, false, false]);\n    // animations.push([x, high, false, true]);\n    // animations.push([x, array[y], true, true]);\n    // animations.push([y, array[x], true, true]);\n    let temp = array[x];\n    array[x] = array[y];\n    array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx){\n        return;\n    }\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k] = auxiliaryArray[i];\n            k++;\n            i++;\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k] = auxiliaryArray[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k] = auxiliaryArray[i];\n        k++;\n        i++;\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k] = auxiliaryArray[j];\n        k++;\n        j++;\n    }\n}"]},"metadata":{},"sourceType":"module"}