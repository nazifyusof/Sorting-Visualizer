{"ast":null,"code":"var _jsxFileName = \"/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport * as sortingAlgorithms from '../SortingAlgorithms.js';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 180; i++) {\n      array.push(randomIntFromInterval(5, 650));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  test() {\n    for (let i = 0; i < 50; i++) {\n      //test 50 times\n      const array = [];\n      let length = randomIntFromInterval(1, 1000);\n\n      for (let j = 0; j < length; j++) {\n        array.push(randomIntFromInterval(5, 1000));\n      }\n\n      const javascriptsortedArray = this.state.array.slice().sort((a, b) => a - b);\n      const sortedArray = sortingAlgorithms.mergeSort(this.state.array); // const sortedArray = sortingAlgorithms.quickSort(this.state.array);\n      // const sortedArray = sortingAlgorithms.heapSort(this.state.array);\n      // const sortedArray = sortingAlgorithms.bubbleSort(this.state.array);\n\n      console.log(arraysAreEqual(javascriptsortedArray, sortedArray));\n    }\n  }\n\n  mergeSort() {\n    const javascriptsortedArray = this.state.array.slice().sort((a, b) => a - b);\n    const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\n    console.log(arraysAreEqual(javascriptsortedArray, sortedArray));\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${value}px`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Bubble Sort\"), React.createElement(\"button\", {\n      onClick: () => this.test(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" Test Sorting Algorithm \"));\n  }\n\n} //from internet\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * Math.floor(max - min + 1 + min));\n}\n\nfunction arraysAreEqual(x, y) {\n  if (x.length !== y.length) {\n    return false;\n  }\n\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] !== y[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","sortingAlgorithms","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","test","length","j","javascriptsortedArray","slice","sort","a","b","sortedArray","mergeSort","console","log","arraysAreEqual","quickSort","heapSort","bubbleSort","render","map","value","idx","height","min","max","Math","floor","random","x","y"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport * as sortingAlgorithms from '../SortingAlgorithms.js';\n\nexport default class SortingVisualizer extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        for(let i =0 ; i < 180 ; i++){\n            array.push(randomIntFromInterval(5,650));\n        }\n        this.setState({array});\n    }\n\n    test(){\n        for(let i = 0; i < 50; i++){            //test 50 times\n            const array = [];\n            let length = randomIntFromInterval(1,1000);\n            for(let j = 0; j < length; j++){\n                array.push(randomIntFromInterval(5,1000))\n            }\n            const javascriptsortedArray = this.state.array.slice().sort( (a , b) => a - b);\n            const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\n            // const sortedArray = sortingAlgorithms.quickSort(this.state.array);\n            // const sortedArray = sortingAlgorithms.heapSort(this.state.array);\n            // const sortedArray = sortingAlgorithms.bubbleSort(this.state.array);\n\n            console.log(arraysAreEqual(javascriptsortedArray, sortedArray));\n        }\n    }\n\n    mergeSort(){\n        const javascriptsortedArray = this.state.array.slice().sort( (a , b) => a - b);\n        const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\n\n        console.log(arraysAreEqual(javascriptsortedArray, sortedArray));\n    }\n\n    quickSort(){\n\n    }\n\n    heapSort(){\n\n    }\n\n    bubbleSort(){\n        \n    }\n\n    render(){\n        const {array} = this.state;\n\n        return (\n            <div>\n                {array.map((value, idx) => (\n                    <div className = 'array-bar' key={idx} style = {{height: `${value}px`}}>\n                    </div>\n                ))}\n                <button onClick={() => this.resetArray()} >Generate New Array</button>\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                <button onClick={() => this.test()}> Test Sorting Algorithm </button>\n\n            </div>   \n        );\n    }\n}\n\n//from internet\nfunction randomIntFromInterval(min, max){\n    return Math.floor(Math.random() * Math.floor((max - min + 1) + min))\n}\n\nfunction arraysAreEqual(x,y){\n    if(x.length !== y.length){\n        return false;\n    }\n    for(let i = 0; i  < x.length; i++){\n        if(x[i] !== y[i]){\n            return false;\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}