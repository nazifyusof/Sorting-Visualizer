{"ast":null,"code":"// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n//     let i = 0;\n//     let j = 0;\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\nexport function getHeapSortAnimations(array){var animations=[];if(array.length<=1){return array;}getHeapSortHelper(array,animations);console.log(array);return animations;}function getHeapSortHelper(mainArray,animations){var n=mainArray.length;//Build Heap\nfor(var i=Math.floor(n/2)-1;i>=0;i--){heapify(mainArray,n,i,animations);}// One by one extract an element from heap \nfor(var j=n-1;j>=0;j--){animations.push([0,mainArray[j],true,true]);animations.push([j,mainArray[0],true,true]);swap(mainArray,0,j);heapify(mainArray,j,0,animations);}}function heapify(mainArray,n,i,animations){var largest=i;// Initialize largest as root \nvar l=2*i+1;// left = 2*i + 1 \nvar r=2*i+2;// right = 2*i + 2 \nif(l<mainArray.length){animations.push([largest,l,false,false]);animations.push([largest,l,false,true]);}// If left child is larger than root \nif(l<n&&mainArray[l]>mainArray[largest]){largest=l;}if(r<mainArray.length){animations.push([largest,r,false,false]);animations.push([largest,r,false,true]);}// If right child is larger than largest so far \nif(r<n&&mainArray[r]>mainArray[largest]){largest=r;}// If largest is not root \nif(largest!=i){animations.push([i,mainArray[largest],true,true]);animations.push([largest,mainArray[i],true,true]);swap(mainArray,i,largest);// Recursively heapify the affected sub-tree \nheapify(mainArray,n,largest,animations);}}export function getQuickSortAnimations(array){var animations=[];if(array.length<=1){return array;}getQuickSortHelper(array,0,array.length-1,animations);console.log(array);return animations;}function getQuickSortHelper(mainArray,low,high,animations){if(low<high){var pi=partition(mainArray,low,high,animations);console.log(pi);getQuickSortHelper(mainArray,low,pi-1,animations);getQuickSortHelper(mainArray,pi+1,high,animations);}}function partition(mainArray,low,high,animations){var pivot=mainArray[high];var i=low-1;var j=low;for(j=low;j<high;j++){animations.push([j,high,false,false]);animations.push([j,high,false,true]);if(mainArray[j]<pivot){i++;animations.push([i,mainArray[j],true,true]);animations.push([j,mainArray[i],true,true]);swap(mainArray,i,j);}}animations.push([i+1,mainArray[high],true,true]);animations.push([high,mainArray[i+1],true,true]);swap(mainArray,i+1,high);return i+1;}function swap(array,x,y){// animations.push([x, high, false, false]);\n// animations.push([x, high, false, true]);\n// animations.push([x, array[y], true, true]);\n// animations.push([y, array[x], true, true]);\nvar temp=array[x];array[x]=array[y];array[y]=temp;}export function getMergeSortAnimations(array){var animations=[];if(array.length<=1){return array;}var auxiliaryArray=array.slice();mergeSortHelper(array,0,array.length-1,auxiliaryArray,animations);return animations;}function mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations){if(startIdx===endIdx){return;}var middleIdx=Math.floor((startIdx+endIdx)/2);mergeSortHelper(auxiliaryArray,startIdx,middleIdx,mainArray,animations);mergeSortHelper(auxiliaryArray,middleIdx+1,endIdx,mainArray,animations);doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations);}function doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations){var k=startIdx;var i=startIdx;var j=middleIdx+1;while(i<=middleIdx&&j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([i,j]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([i,j]);if(auxiliaryArray[i]<=auxiliaryArray[j]){// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i]]);mainArray[k]=auxiliaryArray[i];k++;i++;}else{// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j]]);mainArray[k]=auxiliaryArray[j];k++;j++;}}while(i<=middleIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([i,i]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([i,i]);// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i]]);mainArray[k]=auxiliaryArray[i];k++;i++;}while(j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([j,j]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([j,j]);// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j]]);mainArray[k]=auxiliaryArray[j];k++;j++;}}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/docs/src/SortingAlgorithms.js"],"names":["getHeapSortAnimations","array","animations","length","getHeapSortHelper","console","log","mainArray","n","i","Math","floor","heapify","j","push","swap","largest","l","r","getQuickSortAnimations","getQuickSortHelper","low","high","pi","partition","pivot","x","y","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","startIdx","endIdx","middleIdx","doMerge","k"],"mappings":"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","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n\n//     let i = 0;\n//     let j = 0;\n\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n\nexport function getHeapSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getHeapSortHelper(array,animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getHeapSortHelper(mainArray, animations){\n    let n = mainArray.length;\n    //Build Heap\n    for(let i = Math.floor(n / 2) -1; i >= 0; i--){\n        heapify(mainArray, n, i, animations);\n    }\n    // One by one extract an element from heap \n    for(let j = n-1; j >= 0; j--){\n        animations.push([0, mainArray[j], true, true]);\n        animations.push([j, mainArray[0], true, true]);\n        swap(mainArray, 0, j );\n        heapify(mainArray, j,  0, animations);\n    }\n}\n\nfunction heapify(mainArray, n, i, animations){\n    let largest = i; // Initialize largest as root \n    let l = 2*i + 1; // left = 2*i + 1 \n    let r = 2*i + 2; // right = 2*i + 2 \n\n    if(l < mainArray.length){\n        animations.push([largest, l, false, false]);\n        animations.push([largest, l, false, true]);\n    }\n    // If left child is larger than root \n    if (l < n && mainArray[l] > mainArray[largest]) {\n        largest = l; \n    }\n\n    if(r < mainArray.length){   \n        animations.push([largest, r, false, false]);\n        animations.push([largest, r, false, true]);\n    }\n    // If right child is larger than largest so far \n    if (r < n && mainArray[r] > mainArray[largest]){\n        largest = r; \n    }   \n    // If largest is not root \n    if (largest != i){ \n        animations.push([i, mainArray[largest], true, true]);\n        animations.push([largest, mainArray[i], true, true]);\n        swap(mainArray, i, largest);\n        // Recursively heapify the affected sub-tree \n        heapify(mainArray, n, largest, animations); \n    } \n}\n\nexport function getQuickSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getQuickSortHelper(array, 0, array.length - 1, animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations){\n    if(low < high){\n        let pi = partition(mainArray, low, high, animations);\n        console.log(pi);\n        getQuickSortHelper(mainArray, low, pi-1, animations); \n        getQuickSortHelper(mainArray, pi+1, high, animations); \n    }\n}\n\nfunction partition(mainArray, low, high, animations){\n    let pivot = mainArray[high];\n    let i = low - 1;\n    let j = low;\n\n    for(j = low; j < high; j ++){\n        animations.push([j,high, false, false]);\n        animations.push([j,high, false, true]);\n        if(mainArray[j] < pivot){\n            i++;\n            animations.push([i, mainArray[j], true, true]);\n            animations.push([j, mainArray[i], true, true]);\n            swap(mainArray, i, j)\n        }\n    }\n    animations.push([i+1, mainArray[high], true, true]);\n    animations.push([high, mainArray[i+1], true, true]);\n    swap(mainArray, i+1, high)\n\n    return i + 1;\n}\n\nfunction swap(array, x , y){\n    // animations.push([x, high, false, false]);\n    // animations.push([x, high, false, true]);\n    // animations.push([x, array[y], true, true]);\n    // animations.push([y, array[x], true, true]);\n    let temp = array[x];\n    array[x] = array[y];\n    array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx){\n        return;\n    }\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k] = auxiliaryArray[i];\n            k++;\n            i++;\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k] = auxiliaryArray[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k] = auxiliaryArray[i];\n        k++;\n        i++;\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k] = auxiliaryArray[j];\n        k++;\n        j++;\n    }\n}"]},"metadata":{},"sourceType":"module"}