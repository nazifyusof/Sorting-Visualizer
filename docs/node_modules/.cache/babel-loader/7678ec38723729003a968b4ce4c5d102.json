{"ast":null,"code":"// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n//     let i = 0;\n//     let j = 0;\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\nexport function getHeapSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getHeapSortHelper(array, animations);\n  return animations;\n}\n\nfunction getHeapSortHelper(mainArray, animations) {\n  let n = mainArray.length; //Build Heap\n\n  for (let i = n / 2 - 1; i >= 0; i--) {\n    heapify(mainArray, n, i);\n  } // One by one extract an element from heap \n\n\n  for (let j = n - 1; j >= 0; j--) {\n    swap(mainArray, 0, j);\n    heapify(mainArray, j, 0);\n  }\n}\n\nfunction heapify(mainArray, n, i) {\n  let largest = i; // Initialize largest as root \n\n  let l = 2 * i + 1; // left = 2*i + 1 \n\n  let r = 2 * i + 2; // right = 2*i + 2 \n  // If left child is larger than root \n\n  if (l < n && mainArray[l] > mainArray[largest]) animations.push(l, n);\n  animations.push(l, n);\n  largest = l; // If right child is larger than largest so far \n\n  if (r < n && mainArray[r] > mainArray[largest]) largest = r; // If largest is not root \n\n  if (largest != i) {\n    swap(mainArray, i, largest); // Recursively heapify the affected sub-tree \n\n    heapify(mainArray, n, largest);\n  }\n}\n\nexport function getQuickSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  getQuickSortHelper(array, 0, array.length - 1, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations) {\n  if (low < high) {\n    let pi = partition(mainArray, low, high, animations);\n    console.log(pi);\n    getQuickSortHelper(mainArray, low, pi - 1, animations);\n    getQuickSortHelper(mainArray, pi + 1, high, animations);\n  }\n}\n\nfunction partition(mainArray, low, high, animations) {\n  let pivot = mainArray[high];\n  let i = low - 1;\n  let j = low;\n\n  for (j = low; j < high; j++) {\n    animations.push([j, high, false, false]);\n    animations.push([j, high, false, true]);\n\n    if (mainArray[j] < pivot) {\n      i++;\n      animations.push([i, mainArray[j], true, true]);\n      animations.push([j, mainArray[i], true, true]);\n      swap(mainArray, i, j);\n    }\n  }\n\n  animations.push([i + 1, mainArray[high], true, true]);\n  animations.push([high, mainArray[i + 1], true, true]);\n  swap(mainArray, i + 1, high);\n  return i + 1;\n}\n\nfunction swap(array, x, y) {\n  // animations.push([x, high, false, false]);\n  // animations.push([x, high, false, true]);\n  // animations.push([x, array[y], true, true]);\n  // animations.push([y, array[x], true, true]);\n  let temp = array[x];\n  array[x] = array[y];\n  array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n  let animations = [];\n\n  if (array.length <= 1) {\n    return array;\n  }\n\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) {\n    return;\n  }\n\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k] = auxiliaryArray[i];\n      k++;\n      i++;\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k] = auxiliaryArray[j];\n      k++;\n      j++;\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k] = auxiliaryArray[i];\n    k++;\n    i++;\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k] = auxiliaryArray[j];\n    k++;\n    j++;\n  }\n}","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingAlgorithms.js"],"names":["getHeapSortAnimations","array","animations","length","getHeapSortHelper","mainArray","n","i","heapify","j","swap","largest","l","r","push","getQuickSortAnimations","getQuickSortHelper","console","log","low","high","pi","partition","pivot","x","y","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","startIdx","endIdx","middleIdx","Math","floor","doMerge","k"],"mappings":"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","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1){\n//         return array;\n//     }\n\n//     const midIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, midIndex));\n//     const secondHalf = mergeSort(array.slice(midIndex));\n//     const sortedArray = [];\n\n//     let i = 0;\n//     let j = 0;\n\n//     while(i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++]);\n//         }else{\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n\n//     while(i < firstHalf.length){\n//         sortedArray.push(firstHalf[i++]);\n//     }\n//     while(j < secondHalf.length){\n//         sortedArray.push(secondHalf[j++]);\n//     }\n//     return sortedArray;\n// };\n\nexport function getHeapSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getHeapSortHelper(array,animations);\n    return animations;\n}\n\nfunction getHeapSortHelper(mainArray, animations){\n    let n = mainArray.length;\n    //Build Heap\n    for(let i = n / 2 - 1; i >= 0; i--){\n        heapify(mainArray, n, i);\n    }\n    // One by one extract an element from heap \n    for(let j = n -1; j >= 0; j--){\n        swap(mainArray, 0, j );\n        heapify(mainArray, j,  0);\n    }\n}\n\nfunction heapify(mainArray, n, i){\n    let largest = i; // Initialize largest as root \n    let l = 2*i + 1; // left = 2*i + 1 \n    let r = 2*i + 2; // right = 2*i + 2 \n\n    // If left child is larger than root \n    if (l < n && mainArray[l] > mainArray[largest]) \n        animations.push(l, n);\n        animations.push(l, n);\n        largest = l; \n\n    // If right child is larger than largest so far \n    if (r < n && mainArray[r] > mainArray[largest]) \n        largest = r; \n\n    // If largest is not root \n    if (largest != i) \n    { \n        swap(mainArray, i, largest);\n        // Recursively heapify the affected sub-tree \n        heapify(mainArray, n, largest); \n    } \n}\n\nexport function getQuickSortAnimations(array){\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    getQuickSortHelper(array, 0, array.length - 1, animations);\n    console.log(array);\n    return animations;\n}\n\nfunction getQuickSortHelper(mainArray, low, high, animations){\n    if(low < high){\n        let pi = partition(mainArray, low, high, animations);\n        console.log(pi);\n        getQuickSortHelper(mainArray, low, pi-1, animations); \n        getQuickSortHelper(mainArray, pi+1, high, animations); \n    }\n}\n\nfunction partition(mainArray, low, high, animations){\n    let pivot = mainArray[high];\n    let i = low - 1;\n    let j = low;\n\n    for(j = low; j < high; j ++){\n        animations.push([j,high, false, false]);\n        animations.push([j,high, false, true]);\n        if(mainArray[j] < pivot){\n            i++;\n            animations.push([i, mainArray[j], true, true]);\n            animations.push([j, mainArray[i], true, true]);\n            swap(mainArray, i, j)\n        }\n    }\n    animations.push([i+1, mainArray[high], true, true]);\n    animations.push([high, mainArray[i+1], true, true]);\n    swap(mainArray, i+1, high)\n\n    return i + 1;\n}\n\nfunction swap(array, x , y){\n    // animations.push([x, high, false, false]);\n    // animations.push([x, high, false, true]);\n    // animations.push([x, array[y], true, true]);\n    // animations.push([y, array[x], true, true]);\n    let temp = array[x];\n    array[x] = array[y];\n    array[y] = temp;\n}\n\nexport function getMergeSortAnimations(array) {\n    let animations = [];\n    if (array.length <= 1){\n        return array;\n    } \n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx){\n        return;\n    }\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k] = auxiliaryArray[i];\n            k++;\n            i++;\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k] = auxiliaryArray[j];\n            k++;\n            j++;\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k] = auxiliaryArray[i];\n        k++;\n        i++;\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k] = auxiliaryArray[j];\n        k++;\n        j++;\n    }\n}"]},"metadata":{},"sourceType":"module"}