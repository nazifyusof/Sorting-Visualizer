{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length === 1) {\n    return array;\n  }\n\n  const midIndex = Math.floor(array.length / 2);\n  const firstHalf = mergeSort(array.slice(0, midIndex));\n  const secondHalf = mergeSort(array.slice(midIndex));\n  const sortedArray = [];\n  let i = 0;\n  let j = 0;\n\n  while (i < firstHalf.length && j < secondHalf.length) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n\n  while (i < firstHalf.length) {\n    sortedArray.push(firstHalf[i++]);\n  }\n\n  while (j < secondHalf.length) {\n    sortedArray.push(secondHalf[j++]);\n  }\n\n  return sortedArray;\n};\nexport const test = array => {\n  for (let i = 0; i < 50; i++) {\n    const array = [];\n    let length = randomIntFromInterval(1, 1000);\n\n    for (let j = 0; j < randomIntFromInterval(1, 1000); i++) {\n      array.push(randomIntFromInterval());\n    }\n\n    const javascriptsortedArray = this.state.array.slice().sort((a, b) => a - b);\n    const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\n    console.log(arraysAreEqual(javascriptsortedArray, sortedArray));\n  }\n};","map":{"version":3,"sources":["/Users/owner/myProject/Sorting-Visualizer/sorting-visualizer/src/SortingAlgorithms.js"],"names":["mergeSort","array","length","midIndex","Math","floor","firstHalf","slice","secondHalf","sortedArray","i","j","push","test","randomIntFromInterval","javascriptsortedArray","state","sort","a","b","sortingAlgorithms","console","log","arraysAreEqual"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGC,KAAK,IAAI;AAC9B,MAAGA,KAAK,CAACC,MAAN,KAAiB,CAApB,EAAsB;AAClB,WAAOD,KAAP;AACH;;AAED,QAAME,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,MAAN,GAAe,CAA1B,CAAjB;AACA,QAAMI,SAAS,GAAGN,SAAS,CAACC,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeJ,QAAf,CAAD,CAA3B;AACA,QAAMK,UAAU,GAAGR,SAAS,CAACC,KAAK,CAACM,KAAN,CAAYJ,QAAZ,CAAD,CAA5B;AACA,QAAMM,WAAW,GAAG,EAApB;AAEA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAMD,CAAC,GAAGJ,SAAS,CAACJ,MAAd,IAAwBS,CAAC,GAAGH,UAAU,CAACN,MAA7C,EAAoD;AAChD,QAAGI,SAAS,CAACI,CAAD,CAAT,GAAeF,UAAU,CAACG,CAAD,CAA5B,EAAgC;AAC5BF,MAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH,KAFD,MAEK;AACDD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;AACJ;;AAED,SAAMD,CAAC,GAAGJ,SAAS,CAACJ,MAApB,EAA2B;AACvBO,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH;;AACD,SAAMC,CAAC,GAAGH,UAAU,CAACN,MAArB,EAA4B;AACxBO,IAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;;AACD,SAAOF,WAAP;AACH,CA5BM;AA8BP,OAAO,MAAMI,IAAI,GAAGZ,KAAK,IAAI;AACzB,OAAI,IAAIS,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA2B;AACvB,UAAMT,KAAK,GAAG,EAAd;AACA,QAAIC,MAAM,GAAGY,qBAAqB,CAAC,CAAD,EAAG,IAAH,CAAlC;;AACA,SAAI,IAAIH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGG,qBAAqB,CAAC,CAAD,EAAG,IAAH,CAAxC,EAAkDJ,CAAC,EAAnD,EAAsD;AAClDT,MAAAA,KAAK,CAACW,IAAN,CAAWE,qBAAqB,EAAhC;AACH;;AACD,UAAMC,qBAAqB,GAAG,KAAKC,KAAL,CAAWf,KAAX,CAAiBM,KAAjB,GAAyBU,IAAzB,CAA+B,CAACC,CAAD,EAAKC,CAAL,KAAWD,CAAC,GAAGC,CAA9C,CAA9B;AACA,UAAMV,WAAW,GAAGW,iBAAiB,CAACpB,SAAlB,CAA4B,KAAKgB,KAAL,CAAWf,KAAvC,CAApB;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAYC,cAAc,CAACR,qBAAD,EAAwBN,WAAxB,CAA1B;AACH;AACJ,CAXM","sourcesContent":["export const mergeSort = array => {\n    if(array.length === 1){\n        return array;\n    }\n\n    const midIndex = Math.floor(array.length / 2);\n    const firstHalf = mergeSort(array.slice(0, midIndex));\n    const secondHalf = mergeSort(array.slice(midIndex));\n    const sortedArray = [];\n\n    let i = 0;\n    let j = 0;\n\n    while(i < firstHalf.length && j < secondHalf.length){\n        if(firstHalf[i] < secondHalf[j]){\n            sortedArray.push(firstHalf[i++]);\n        }else{\n            sortedArray.push(secondHalf[j++]);\n        }\n    }\n\n    while(i < firstHalf.length){\n        sortedArray.push(firstHalf[i++]);\n    }\n    while(j < secondHalf.length){\n        sortedArray.push(secondHalf[j++]);\n    }\n    return sortedArray;\n};\n\nexport const test = array => {\n    for(let i = 0; i < 50; i++){\n        const array = [];\n        let length = randomIntFromInterval(1,1000);\n        for(let j = 0; j < randomIntFromInterval(1,1000); i++){\n            array.push(randomIntFromInterval())\n        }\n        const javascriptsortedArray = this.state.array.slice().sort( (a , b) => a - b);\n        const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\n        console.log(arraysAreEqual(javascriptsortedArray, sortedArray));\n    }\n}"]},"metadata":{},"sourceType":"module"}